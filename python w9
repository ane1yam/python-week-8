1. 
a = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]
less_than_five = [num for num in a if num < 5]
print("Elements less than 5:", less_than_five)


2.
a = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]
b = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]
common_elements = list(set(a) & set(b))
print("Common elements:", common_elements)


3. 
d = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0}
sorted_d_asc = dict(sorted(d.items(), key=lambda item: item[1]))
print("Dictionary sorted in ascending order:", sorted_d_asc)

sorted_d_desc = dict(sorted(d.items(), key=lambda item: item[1], reverse=True))
print("Dictionary sorted in descending order:", sorted_d_desc)


4.
dict_a = {1: 10, 2: 20}
dict_b = {3: 30, 4: 40}
dict_c = {5: 50, 6: 60}
merged_dict = {**dict_a, **dict_b, **dict_c}
print("Merged Dictionary:", merged_dict)


5. 
my_dict = {'a': 500, 'b': 5874, 'c': 560, 'd': 400, 'e': 5874, 'f': 20}
top_keys = sorted(my_dict, key=my_dict.get, reverse=True)[:3]
print("Top 3 keys with the highest values:", top_keys)


6.
def int_to_string(num, base):
    if base < 2 or base > 36:
        raise ValueError("Base must be between 2 and 36")
    chars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    result = ""
    negative = num < 0
    num = abs(num)

    while num > 0:
        result = chars[num % base] + result
        num //= base

    if negative:
        result = "-" + result

    return result or "0"

print("Number 255 in base 16:", int_to_string(255, 16))
print("Number 10 in base 2:", int_to_string(10, 2))


7.
def print_pascals_triangle(n):
    triangle = [[1]]
    for i in range(1, n):
        row = [1]
        for j in range(1, i):
            row.append(triangle[i - 1][j - 1] + triangle[i - 1][j])
        row.append(1)
        triangle.append(row)

    for row in triangle:
        print(row)

n = 5  
print_pascals_triangle(n)
